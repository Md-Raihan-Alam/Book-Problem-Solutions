a->
    In a B+-tree index or file organization, leaf nodes that are adjacent to each other in the tree
    my be located at different places on disk. When a file organization is newly created on a set of records,
    it is possible to allocate blocks that are mostly contiguous on dist to leafs nodes that
    are contiguous in the tree, As insertion and deletions occur on the tree,
    sequentiality is in increasingly lost, and sequential access has to wait for disk seeks
    increasingly often.
b->
    i. In the worst case, each n-block unit and each node of the B+-tree is half filled.
       This gives the worst-case occupancy as 25 percent.
    ii. No, While splitting the n-block unit, the first n/2 leaf pages are placed in one n-block unit and
    remaining pages in the second n-block unit. What is every n-block split maintains the order. Hence, the 
    nodes in the n-block units are consecutive.
    iii. In the regular B+-tree construction, the leaf pages might not be sequential and
    hence in the wors-casee, it takes on seek per leaf page. Using the block at a time method, for each n-node block, we will have at
    least n/2 leaf nodes in it. Each n-node block can be read using on seek. Hence the worst-case seeks come down by a factor of n/2.
    iv. Allowing redistribution among the noes of the same block does not require additional seeks, whereas in regual B+-trees
    we require as many seeks as the number of leaf pages involved in the redistribution. This makes reditribtu9ion for leaf block efficient with this shceme,
    Also, thw worst-case occupancy comes back to nearly 50 percent.