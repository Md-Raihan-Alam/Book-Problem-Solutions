To show that an n-element heap has a height of floor(log₂(n)), we can start by understanding the structure of a binary heap.

A binary heap is a complete binary tree, which means it is structured in such a way that all levels are completely filled, except possibly the last level, which is filled from left to right. Now, let's consider a few properties of binary heaps:

1. In a binary heap of height "h," there can be at most 2^(h+1) - 1 nodes. This is the maximum number of nodes that can be accommodated in a heap of height "h."

2. To find the height of the heap, we can solve for "h" in the inequality:
   n <= 2^(h+1) - 1

3. Solving for "h":
   n <= 2^(h+1) - 1
   n + 1 <= 2^(h+1)
   log₂(n + 1) <= h + 1
   h >= log₂(n + 1) - 1

4. Since "h" is the height of the heap, we should take the floor of the result:
   h = floor(log₂(n + 1)) - 1

5. We subtract 1 to account for the zero-based indexing commonly used in computer science. This is why we subtract 1 from the expression.

So, we've shown that the height of an n-element heap is indeed floor(log₂(n + 1)) - 1.